{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pasan\\\\Desktop\\\\Todo-App-MERN\\\\frontend\\\\src\\\\containers\\\\home\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Container, Table, Row, Col, FormGroup, FormControl } from 'react-bootstrap';\nimport Header from '../../components/header';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from '../../components/model';\nimport Input from '../../components/input';\nimport { addTask, deleteTaskById, changeStatusById } from '../../actions';\nimport DoneIcon from '@mui/icons-material/Done';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport Button from '@mui/material/Button';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'; // table try\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = props => {\n  _s();\n\n  const tasks = useSelector(state => state.tasks);\n  const [title, setTitle] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [show, setShow] = useState(false);\n  const dispatch = useDispatch(); // function to colose the model\n\n  const handleClose = () => {\n    setShow(false);\n  }; //form submit function\n\n\n  const submitForm = () => {\n    const payload = {\n      title,\n      endDate\n    };\n    dispatch(addTask(payload)); //console.log(payload);\n\n    setShow(false);\n  }; // function to delete a task\n\n\n  const deleteTask = taskId => {\n    const payload = {\n      taskId\n    };\n    alert('Are you sure you want to delete this task?');\n    dispatch(deleteTaskById(payload));\n  }; //function to change the status of a task\n\n\n  const changeStatus = _id => {\n    const payload = {\n      _id\n    };\n    dispatch(changeStatusById(payload));\n  }; // function to show the add new task\n\n\n  const showAddNewModel = () => setShow(true); //const handleShow = () => setShow(true);\n\n\n  const renderAddTaskModal = () => {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      handleClose: handleClose,\n      modalTitle: 'Add new Task',\n      onSubmit: submitForm,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        label: \"Name\",\n        placeholder: \"Product Name\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        controlId: \"date\",\n        bsSize: \"large\",\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          type: \"date\",\n          style: {\n            width: '100%'\n          },\n          value: endDate,\n          onChange: e => setEndDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }; /// table try content\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 8\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            size: \"large\",\n            startIcon: /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 65\n            }, this),\n            onClick: showAddNewModel,\n            children: \"  Add a new Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Task Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"States\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"End date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Change The Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tasks.tasks.map((task, index) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: ++index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: task.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: task.activeStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: task.endDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"  \", /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  size: \"small\",\n                  startIcon: /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 76\n                  }, this),\n                  onClick: () => changeStatus(task._id),\n                  children: \"Mark as Done  \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 25\n                }, this), \"  \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                endIcon: /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 56\n                }, this),\n                onClick: () => deleteTask(task._id),\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), renderAddTaskModal()]\n  }, void 0, true);\n};\n\n_s(Home, \"bcegorlAXdaJ2EMFQ33UVk5/Rp4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/Pasan/Desktop/Todo-App-MERN/frontend/src/containers/home/index.js"],"names":["React","useEffect","useState","Container","Table","Row","Col","FormGroup","FormControl","Header","useDispatch","useSelector","Modal","Input","addTask","deleteTaskById","changeStatusById","DoneIcon","DeleteForeverIcon","Button","AddCircleOutlineIcon","Home","props","tasks","state","title","setTitle","endDate","setEndDate","show","setShow","dispatch","handleClose","submitForm","payload","deleteTask","taskId","alert","changeStatus","_id","showAddNewModel","renderAddTaskModal","e","target","value","width","offset","map","task","index","activeStatus"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Container, Table, Row, Col,  FormGroup, FormControl } from 'react-bootstrap'\r\nimport Header from '../../components/header';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Modal from '../../components/model';\r\nimport Input from '../../components/input';\r\nimport { addTask, deleteTaskById ,changeStatusById} from '../../actions'\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport Button from '@mui/material/Button';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\n\r\n\r\n// table try\r\n\r\n\r\nconst Home = (props) => {\r\n\r\n  const tasks = useSelector(state => state.tasks);\r\n  const [title, setTitle] = useState('')\r\n  const [endDate, setEndDate] = useState('')\r\n\r\n  const [show, setShow] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // function to colose the model\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  }\r\n\r\n\r\n  //form submit function\r\n  const submitForm = () => {\r\n\r\n    const payload = {\r\n      title,\r\n      endDate,\r\n\r\n    };\r\n\r\n    dispatch(addTask(payload));\r\n    //console.log(payload);\r\n\r\n    setShow(false);\r\n\r\n  }\r\n\r\n  // function to delete a task\r\n  const deleteTask = (taskId) => {\r\n    const payload = {\r\n      taskId\r\n    };\r\n    alert('Are you sure you want to delete this task?')\r\n    dispatch(deleteTaskById(payload));\r\n  };\r\n\r\n  //function to change the status of a task\r\n\r\n  const changeStatus = (_id) => {\r\n    const payload ={\r\n      _id\r\n    }\r\n\r\n    dispatch(changeStatusById(payload));\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  // function to show the add new task\r\n  const showAddNewModel = () => setShow(true);\r\n\r\n  //const handleShow = () => setShow(true);\r\n\r\n\r\n  const renderAddTaskModal = () => {\r\n    return (\r\n      <Modal\r\n        show={show}\r\n        handleClose={handleClose}\r\n        modalTitle={'Add new Task'}\r\n        onSubmit={submitForm}\r\n      >\r\n        <Input\r\n          label=\"Name\"\r\n          placeholder=\"Product Name\"\r\n\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n\r\n        />\r\n        <FormGroup controlId=\"date\" bsSize=\"large\">\r\n\r\n          <FormControl\r\n            type=\"date\"\r\n            style={{ width: '100%' }}\r\n\r\n            value={endDate}\r\n            onChange={(e) => setEndDate(e.target.value)}\r\n          />\r\n        </FormGroup>\r\n\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n\r\n  /// table try content\r\n  \r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container>\r\n        <Row>\r\n\r\n          <Col md={{ offset: 8 }}>\r\n         \r\n\r\n            <Button variant=\"contained\" size=\"large\" startIcon={<AddCircleOutlineIcon /> } onClick={showAddNewModel}>  Add a new Task</Button>{' '}</Col>\r\n        </Row>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Task Name</th>\r\n              <th>States</th>\r\n              <th>End date</th>\r\n              <th>Change The Status</th>\r\n              <th>Remove</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n\r\n            {tasks.tasks.map((task, index) => {\r\n              return (\r\n                <tr>\r\n                  <td>{++index}</td>\r\n                  <td>{task.title}</td>\r\n                  <td>{task.activeStatus}\r\n                \r\n\r\n                  </td>\r\n                  <td>{task.endDate}</td>\r\n                  <td>  <Button variant=\"outlined\" size=\"small\" startIcon={<DoneIcon />} onClick={() => changeStatus(task._id)} >Mark as Done  </Button>  </td>\r\n                \r\n                  <Button variant=\"contained\" endIcon={<DeleteForeverIcon />} onClick={() => deleteTask(task._id)} >Remove</Button>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n\r\n      </Container>\r\n      {renderAddTaskModal()}\r\n\r\n\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}