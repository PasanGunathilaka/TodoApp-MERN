{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { tasksConstants } from \"./constants\"; // action to get all the tasks\n\nconst getTasks = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: tasksConstants.GET_ALL_TASKS_REQUEST\n      });\n      const res = await axios.post(`tasks/all`);\n\n      if (res.status === 200) {\n        const {\n          tasks\n        } = res.data;\n        dispatch({\n          type: tasksConstants.GET_ALL_TASKS_SUCCESS,\n          payload: {\n            tasks\n          }\n        });\n      } else {\n        dispatch({\n          type: tasksConstants.GET_ALL_TASKS_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; // action to add a new task\n\n\nexport const addTask = payload => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: tasksConstants.ADD_TASK_REQUEST\n      });\n      const res = await axios.post(`tasks/create`, payload);\n\n      if (res.status === 201) {\n        dispatch({\n          type: tasksConstants.ADD_TASK_SUCCESS\n        });\n        dispatch(getTasks());\n      } else {\n        dispatch({\n          type: tasksConstants.ADD_TASK_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; //action to delete task\n\nexport const deleteTaskById = payload => {\n  console.log(payload);\n  return async dispatch => {\n    try {\n      const res = await axios.delete(`tasks/remove`, {\n        data: {\n          payload\n        }\n      });\n      dispatch({\n        type: tasksConstants.DELETE_TASK_BY_ID_REQUEST\n      });\n\n      if (res.status === 202) {\n        dispatch({\n          type: tasksConstants.DELETE_TASK_BY_ID_SUCCESS\n        });\n        dispatch(getTasks());\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: tasksConstants.DELETE_TASK_BY_ID_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; // action to add a new task\n\nexport const changeStatusById = payload => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: tasksConstants.CHANGE_TASK_STATUS_REQUEST\n      });\n      const res = await axios.post(`tasks/update`, payload);\n\n      if (res.status === 201) {\n        dispatch({\n          type: tasksConstants.CHANGE_TASK_STATUS__SUCCESS\n        });\n        dispatch(getTasks());\n      } else {\n        dispatch({\n          type: tasksConstants.CHANGE_TASK_STATUS__FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport { getTasks };","map":{"version":3,"sources":["C:/Users/Pasan/Desktop/Todo-App-MERN/frontend/src/actions/tasks.action.js"],"names":["axios","tasksConstants","getTasks","dispatch","type","GET_ALL_TASKS_REQUEST","res","post","status","tasks","data","GET_ALL_TASKS_SUCCESS","payload","GET_ALL_TASKS_FAILURE","error","console","log","addTask","ADD_TASK_REQUEST","ADD_TASK_SUCCESS","ADD_TASK_FAILURE","deleteTaskById","delete","DELETE_TASK_BY_ID_REQUEST","DELETE_TASK_BY_ID_SUCCESS","DELETE_TASK_BY_ID_FAILURE","changeStatusById","CHANGE_TASK_STATUS_REQUEST","CHANGE_TASK_STATUS__SUCCESS","CHANGE_TASK_STATUS__FAILURE"],"mappings":"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","sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { tasksConstants } from \"./constants\";\r\n\r\n\r\n// action to get all the tasks\r\n const getTasks = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: tasksConstants.GET_ALL_TASKS_REQUEST });\r\n            const res = await axios.post(`tasks/all`);\r\n            if (res.status === 200) {\r\n                const { tasks } = res.data;\r\n                dispatch({\r\n                    type: tasksConstants.GET_ALL_TASKS_SUCCESS,\r\n                    payload: { tasks },\r\n                });\r\n            } else {\r\n                dispatch({ type: tasksConstants.GET_ALL_TASKS_FAILURE });\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n};\r\n\r\n\r\n\r\n// action to add a new task\r\nexport const addTask = (payload) => {\r\n\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: tasksConstants.ADD_TASK_REQUEST });\r\n            const res = await axios.post(`tasks/create`, payload);\r\n            if (res.status === 201) {\r\n                dispatch({ type: tasksConstants.ADD_TASK_SUCCESS });\r\n                dispatch(getTasks());\r\n            } else {\r\n                dispatch({ type: tasksConstants.ADD_TASK_FAILURE });\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n};\r\n\r\n\r\n//action to delete task\r\n\r\nexport const deleteTaskById = (payload) => {\r\n    console.log(payload);\r\n    return async (dispatch) => {\r\n        try{\r\n            const res = await axios.delete(`tasks/remove`,{\r\n                data:{payload},\r\n            });\r\n            dispatch({type: tasksConstants.DELETE_TASK_BY_ID_REQUEST});\r\n           \r\n            if(res.status === 202){\r\n                dispatch({type:tasksConstants.DELETE_TASK_BY_ID_SUCCESS});\r\n                dispatch(getTasks());\r\n            } else{\r\n                const{error} = res.data;\r\n                dispatch({\r\n                    type: tasksConstants.DELETE_TASK_BY_ID_FAILURE,\r\n                    payload:{\r\n                        error,\r\n                    },\r\n                });\r\n            }\r\n        } catch(error){\r\n            console.log(error);\r\n        }\r\n    };\r\n};\r\n\r\n// action to add a new task\r\nexport const changeStatusById = (payload) => {\r\n\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: tasksConstants.CHANGE_TASK_STATUS_REQUEST });\r\n            const res = await axios.post(`tasks/update`, payload);\r\n            if (res.status === 201) {\r\n                dispatch({ type: tasksConstants.CHANGE_TASK_STATUS__SUCCESS });\r\n                dispatch(getTasks());\r\n            } else {\r\n                dispatch({ type: tasksConstants.CHANGE_TASK_STATUS__FAILURE });\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n};\r\n\r\n\r\n\r\nexport {\r\n    getTasks\r\n}"]},"metadata":{},"sourceType":"module"}